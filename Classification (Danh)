import cv2
import numpy as np
from sklearn import svm
import os
import time
import sys
sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf8', buffering=1)

eye_open_dir = 'E:\Data_Open'
eye_closed_dir = 'E:\Data_Closed'

clf = svm.SVC(C=1.0, kernel='linear')

def flip_horizontal(image):
    return cv2.flip (image,  1)

X_eye_open, y_eye_open = [], []
for filename in os.listdir(eye_open_dir):
    img = cv2.imread(os.path.join(eye_open_dir, filename), cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (50, 50))
    feature = np.sum(img > 100) / (img.size)
    X_eye_open.append(feature)
    y_eye_open.append(1)  # Nhãn 1 cho mắt mở

X_eye_closed, y_eye_closed = [], []
for filename in os.listdir(eye_closed_dir):
    img = cv2.imread(os.path.join(eye_closed_dir, filename), cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (50, 50))
    feature = np.sum(img > 100) / (img.size)
    X_eye_closed.append(feature)
    y_eye_closed.append(0)  # Nhãn 0 cho mắt nhắm

X = np.array(X_eye_open + X_eye_closed).reshape(-1, 1)
y = np.array(y_eye_open + y_eye_closed)

clf.fit(X, y)

cap = cv2.VideoCapture(0)

eye_status = "Unknown"
close_time = 0
eye_open_count = 0
eye_closed_count = 0
last_warning_time = 0
last_notification_time = 0

eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

while True:
    ret, frame = cap.read()

    frame = flip_horizontal(frame)

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    upper_half_gray = gray[:int(frame.shape[0] / 2), :]

    eyes = eye_cascade.detectMultiScale(upper_half_gray, scaleFactor=1.1, minNeighbors=5, minSize=(40, 40))

    if len(eyes) == 0:
        close_time += 1
        eye_closed_count += 1
        if eye_closed_count > eye_open_count:
            eye_status = "WARNING!!"
        else:
            eye_status = "Normal"
    else:
        close_time = 0
        eye_open_count += 1
        eye_status = "Normal"

    current_time = time.time()
    if current_time - last_notification_time >= 3:
        print(f"{current_time} - Mắt mở: {eye_open_count}, Mắt nhắm: {eye_closed_count}, Status: {eye_status}")
        last_notification_time = current_time
        eye_open_count = 0
        eye_closed_count = 0

    for (x, y, w, h) in eyes:
        eye_region = upper_half_gray[y:y+h, x:x+w]
        feature = np.sum(eye_region > 100) / (w * h)
        prediction = clf.predict(np.array([feature]).reshape(-1, 1))

        if prediction == 1:
            status = "eye open"
        else:
            status = "eye closed"

        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(frame, f"Eye status: {status}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    cv2.putText(frame, f"Eye Status: {eye_status}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    cv2.imshow('Eye State Detection', frame)

    if cv2.waitKey(95) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
